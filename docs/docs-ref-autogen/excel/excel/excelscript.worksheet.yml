### YamlMime:UniversalReference
items:
  - uid: 'excel!ExcelScript.Worksheet:interface'
    summary: >-
      An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc. To learn more about the worksheet
      object model, read [Work with worksheets using the Excel JavaScript
      API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!-- -->.
    name: ExcelScript.Worksheet
    fullName: ExcelScript.Worksheet
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!ExcelScript.Worksheet#activate:member(1)'
      - 'excel!ExcelScript.Worksheet#addChart:member(1)'
      - 'excel!ExcelScript.Worksheet#addComment:member(1)'
      - 'excel!ExcelScript.Worksheet#addGeometricShape:member(1)'
      - 'excel!ExcelScript.Worksheet#addGroup:member(1)'
      - 'excel!ExcelScript.Worksheet#addImage:member(1)'
      - 'excel!ExcelScript.Worksheet#addLine:member(1)'
      - 'excel!ExcelScript.Worksheet#addNamedItem:member(1)'
      - 'excel!ExcelScript.Worksheet#addNamedItemFormulaLocal:member(1)'
      - 'excel!ExcelScript.Worksheet#addPivotTable:member(1)'
      - 'excel!ExcelScript.Worksheet#addSlicer:member(1)'
      - 'excel!ExcelScript.Worksheet#addTable:member(1)'
      - 'excel!ExcelScript.Worksheet#addTextBox:member(1)'
      - 'excel!ExcelScript.Worksheet#calculate:member(1)'
      - 'excel!ExcelScript.Worksheet#copy:member(1)'
      - 'excel!ExcelScript.Worksheet#delete:member(1)'
      - 'excel!ExcelScript.Worksheet#findAll:member(1)'
      - 'excel!ExcelScript.Worksheet#getAutoFilter:member(1)'
      - 'excel!ExcelScript.Worksheet#getCell:member(1)'
      - 'excel!ExcelScript.Worksheet#getChart:member(1)'
      - 'excel!ExcelScript.Worksheet#getCharts:member(1)'
      - 'excel!ExcelScript.Worksheet#getComment:member(1)'
      - 'excel!ExcelScript.Worksheet#getCommentByCell:member(1)'
      - 'excel!ExcelScript.Worksheet#getCommentByReplyId:member(1)'
      - 'excel!ExcelScript.Worksheet#getComments:member(1)'
      - 'excel!ExcelScript.Worksheet#getEnableCalculation:member(1)'
      - 'excel!ExcelScript.Worksheet#getFreezePanes:member(1)'
      - 'excel!ExcelScript.Worksheet#getId:member(1)'
      - 'excel!ExcelScript.Worksheet#getName:member(1)'
      - 'excel!ExcelScript.Worksheet#getNamedItem:member(1)'
      - 'excel!ExcelScript.Worksheet#getNames:member(1)'
      - 'excel!ExcelScript.Worksheet#getNext:member(1)'
      - 'excel!ExcelScript.Worksheet#getPageLayout:member(1)'
      - 'excel!ExcelScript.Worksheet#getPivotTable:member(1)'
      - 'excel!ExcelScript.Worksheet#getPivotTables:member(1)'
      - 'excel!ExcelScript.Worksheet#getPosition:member(1)'
      - 'excel!ExcelScript.Worksheet#getPrevious:member(1)'
      - 'excel!ExcelScript.Worksheet#getProtection:member(1)'
      - 'excel!ExcelScript.Worksheet#getRange:member(1)'
      - 'excel!ExcelScript.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!ExcelScript.Worksheet#getRanges:member(1)'
      - 'excel!ExcelScript.Worksheet#getShape:member(1)'
      - 'excel!ExcelScript.Worksheet#getShapes:member(1)'
      - 'excel!ExcelScript.Worksheet#getShowGridlines:member(1)'
      - 'excel!ExcelScript.Worksheet#getShowHeadings:member(1)'
      - 'excel!ExcelScript.Worksheet#getSlicer:member(1)'
      - 'excel!ExcelScript.Worksheet#getSlicers:member(1)'
      - 'excel!ExcelScript.Worksheet#getStandardHeight:member(1)'
      - 'excel!ExcelScript.Worksheet#getStandardWidth:member(1)'
      - 'excel!ExcelScript.Worksheet#getTabColor:member(1)'
      - 'excel!ExcelScript.Worksheet#getTable:member(1)'
      - 'excel!ExcelScript.Worksheet#getTables:member(1)'
      - 'excel!ExcelScript.Worksheet#getUsedRange:member(1)'
      - 'excel!ExcelScript.Worksheet#getVisibility:member(1)'
      - 'excel!ExcelScript.Worksheet#refreshAllPivotTables:member(1)'
      - 'excel!ExcelScript.Worksheet#replaceAll:member(1)'
      - 'excel!ExcelScript.Worksheet#setEnableCalculation:member(1)'
      - 'excel!ExcelScript.Worksheet#setName:member(1)'
      - 'excel!ExcelScript.Worksheet#setPosition:member(1)'
      - 'excel!ExcelScript.Worksheet#setShowGridlines:member(1)'
      - 'excel!ExcelScript.Worksheet#setShowHeadings:member(1)'
      - 'excel!ExcelScript.Worksheet#setStandardWidth:member(1)'
      - 'excel!ExcelScript.Worksheet#setTabColor:member(1)'
      - 'excel!ExcelScript.Worksheet#setVisibility:member(1)'
      - 'excel!ExcelScript.Worksheet#showOutlineLevels:member(1)'
  - uid: 'excel!ExcelScript.Worksheet#activate:member(1)'
    summary: Activate the worksheet in the Excel UI.
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#addChart:member(1)'
    name: 'addChart(type, sourceData, seriesBy)'
    fullName: 'addChart(type, sourceData, seriesBy)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addChart(
                    type: ChartType,
                    sourceData: Range,
                    seriesBy?: ChartSeriesBy
                ): Chart;
      return:
        type:
          - 'excel!ExcelScript.Chart:interface'
        description: ''
      parameters:
        - id: type
          description: ''
          type:
            - 'excel!ExcelScript.ChartType:enum'
        - id: sourceData
          description: ''
          type:
            - 'excel!ExcelScript.Range:interface'
        - id: seriesBy
          description: ''
          type:
            - 'excel!ExcelScript.ChartSeriesBy:enum'
  - uid: 'excel!ExcelScript.Worksheet#addComment:member(1)'
    name: 'addComment(cellAddress, content, contentType)'
    fullName: 'addComment(cellAddress, content, contentType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addComment(
                    cellAddress: Range | string,
                    content: CommentRichContent | string,
                    contentType?: ContentType
                ): Comment;
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addComment~0:complex'
        - id: content
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addComment~1:complex'
        - id: contentType
          description: ''
          type:
            - 'excel!ExcelScript.ContentType:enum'
  - uid: 'excel!ExcelScript.Worksheet#addGeometricShape:member(1)'
    name: addGeometricShape(geometricShapeType)
    fullName: addGeometricShape(geometricShapeType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGeometricShape(geometricShapeType: GeometricShapeType): Shape;'
      return:
        type:
          - 'excel!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: geometricShapeType
          description: ''
          type:
            - 'excel!ExcelScript.GeometricShapeType:enum'
  - uid: 'excel!ExcelScript.Worksheet#addGroup:member(1)'
    name: addGroup(values)
    fullName: addGroup(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGroup(values: Array<string | Shape>): Shape;'
      return:
        type:
          - 'excel!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: values
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addGroup~0:complex'
  - uid: 'excel!ExcelScript.Worksheet#addImage:member(1)'
    name: addImage(base64ImageString)
    fullName: addImage(base64ImageString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addImage(base64ImageString: string): Shape;'
      return:
        type:
          - 'excel!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: base64ImageString
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#addLine:member(1)'
    name: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    fullName: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addLine(
                    startLeft: number,
                    startTop: number,
                    endLeft: number,
                    endTop: number,
                    connectorType?: ConnectorType
                ): Shape;
      return:
        type:
          - 'excel!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: startLeft
          description: ''
          type:
            - number
        - id: startTop
          description: ''
          type:
            - number
        - id: endLeft
          description: ''
          type:
            - number
        - id: endTop
          description: ''
          type:
            - number
        - id: connectorType
          description: ''
          type:
            - 'excel!ExcelScript.ConnectorType:enum'
  - uid: 'excel!ExcelScript.Worksheet#addNamedItem:member(1)'
    name: 'addNamedItem(name, reference, comment)'
    fullName: 'addNamedItem(name, reference, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItem(
                    name: string,
                    reference: Range | string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'excel!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: reference
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addNamedItem~0:complex'
        - id: comment
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#addNamedItemFormulaLocal:member(1)'
    name: 'addNamedItemFormulaLocal(name, formula, comment)'
    fullName: 'addNamedItemFormulaLocal(name, formula, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItemFormulaLocal(
                    name: string,
                    formula: string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'excel!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: formula
          description: ''
          type:
            - string
        - id: comment
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#addPivotTable:member(1)'
    name: 'addPivotTable(name, source, destination)'
    fullName: 'addPivotTable(name, source, destination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addPivotTable(
                    name: string,
                    source: Range | string | Table,
                    destination: Range | string
                ): PivotTable;
      return:
        type:
          - 'excel!ExcelScript.PivotTable:interface'
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: source
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addPivotTable~0:complex'
        - id: destination
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addPivotTable~1:complex'
  - uid: 'excel!ExcelScript.Worksheet#addSlicer:member(1)'
    name: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    fullName: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addSlicer(
                    slicerSource: string | PivotTable | Table,
                    sourceField: string | PivotField | number | TableColumn,
                    slicerDestination?: string | Worksheet
                ): Slicer;
      return:
        type:
          - 'excel!ExcelScript.Slicer:interface'
        description: ''
      parameters:
        - id: slicerSource
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addSlicer~0:complex'
        - id: sourceField
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addSlicer~1:complex'
        - id: slicerDestination
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addSlicer~2:complex'
  - uid: 'excel!ExcelScript.Worksheet#addTable:member(1)'
    name: 'addTable(address, hasHeaders)'
    fullName: 'addTable(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
      return:
        type:
          - 'excel!ExcelScript.Table:interface'
        description: ''
      parameters:
        - id: address
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#addTable~0:complex'
        - id: hasHeaders
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#addTextBox:member(1)'
    name: addTextBox(text)
    fullName: addTextBox(text)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTextBox(text?: string): Shape;'
      return:
        type:
          - 'excel!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: text
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#calculate:member(1)'
    summary: Calculates all cells on a worksheet.
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#copy:member(1)'
    summary: Copies a worksheet and places it at the specified position.
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copy(
                    positionType?: WorksheetPositionType,
                    relativeTo?: Worksheet
                ): Worksheet;
      return:
        type:
          - 'excel!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: positionType
          description: ''
          type:
            - 'excel!ExcelScript.WorksheetPositionType:enum'
        - id: relativeTo
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet:interface'
  - uid: 'excel!ExcelScript.Worksheet#delete:member(1)'
    summary: >-
      Deletes the worksheet from the workbook. Note that if the worksheet's visibility is set to "VeryHidden", the
      delete operation will fail with an `InvalidOperation` exception. You should first change its visibility to hidden
      or visible before deleting it.
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#findAll:member(1)'
    summary: >-
      Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object,
      comprising one or more rectangular ranges.
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
      return:
        type:
          - 'excel!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: text
          description: ''
          type:
            - string
        - id: criteria
          description: ''
          type:
            - 'excel!ExcelScript.WorksheetSearchCriteria:interface'
  - uid: 'excel!ExcelScript.Worksheet#getAutoFilter:member(1)'
    summary: Represents the AutoFilter object of the worksheet. Read-Only.
    name: getAutoFilter()
    fullName: getAutoFilter()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAutoFilter(): AutoFilter;'
      return:
        type:
          - 'excel!ExcelScript.AutoFilter:interface'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getCell:member(1)'
    summary: >-
      Gets the range object containing the single cell based on row and column numbers. The cell can be outside the
      bounds of its parent range, so long as it stays within the worksheet grid.
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'excel!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: ''
          type:
            - number
        - id: column
          description: ''
          type:
            - number
  - uid: 'excel!ExcelScript.Worksheet#getChart:member(1)'
    name: getChart(name)
    fullName: getChart(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getChart(name: string): Chart | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getChart~0:complex'
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getCharts:member(1)'
    name: getCharts()
    fullName: getCharts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCharts(): Chart[];'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getCharts~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getComment:member(1)'
    name: getComment(commentId)
    fullName: getComment(commentId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComment(commentId: string): Comment;'
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: commentId
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getCommentByCell:member(1)'
    name: getCommentByCell(cellAddress)
    fullName: getCommentByCell(cellAddress)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByCell(cellAddress: Range | string): Comment;'
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: ''
          type:
            - 'excel!ExcelScript.Worksheet#getCommentByCell~0:complex'
  - uid: 'excel!ExcelScript.Worksheet#getCommentByReplyId:member(1)'
    name: getCommentByReplyId(replyId)
    fullName: getCommentByReplyId(replyId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByReplyId(replyId: string): Comment;'
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: replyId
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getComments:member(1)'
    name: getComments()
    fullName: getComments()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComments(): Comment[];'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getComments~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getEnableCalculation:member(1)'
    summary: >-
      Gets or sets the enableCalculation property of the worksheet. True if Excel recalculates the worksheet when
      necessary. False if Excel doesn't recalculate the sheet.
    name: getEnableCalculation()
    fullName: getEnableCalculation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEnableCalculation(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getFreezePanes:member(1)'
    summary: Gets an object that can be used to manipulate frozen panes on the worksheet. Read-only.
    name: getFreezePanes()
    fullName: getFreezePanes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFreezePanes(): WorksheetFreezePanes;'
      return:
        type:
          - 'excel!ExcelScript.WorksheetFreezePanes:interface'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getId:member(1)'
    summary: >-
      Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains
      the same even when the worksheet is renamed or moved. Read-only.
    name: getId()
    fullName: getId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getId(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getName:member(1)'
    summary: The display name of the worksheet.
    name: getName()
    fullName: getName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getName(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getNamedItem:member(1)'
    name: getNamedItem(name)
    fullName: getNamedItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNamedItem(name: string): NamedItem | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getNamedItem~0:complex'
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getNames:member(1)'
    name: getNames()
    fullName: getNames()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNames(): NamedItem[];'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getNames~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getNext:member(1)'
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a
      null object.
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#getPageLayout:member(1)'
    summary: Gets the PageLayout object of the worksheet.
    name: getPageLayout()
    fullName: getPageLayout()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPageLayout(): PageLayout;'
      return:
        type:
          - 'excel!ExcelScript.PageLayout:interface'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getPivotTable:member(1)'
    name: getPivotTable(name)
    fullName: getPivotTable(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTable(name: string): PivotTable | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getPivotTable~0:complex'
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getPivotTables:member(1)'
    name: getPivotTables()
    fullName: getPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(): PivotTable[];'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getPivotTables~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getPosition:member(1)'
    summary: The zero-based position of the worksheet within the workbook.
    name: getPosition()
    fullName: getPosition()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPosition(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getPrevious:member(1)'
    summary: >-
      Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null
      objet.
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#getProtection:member(1)'
    summary: Returns sheet protection object for a worksheet. Read-only.
    name: getProtection()
    fullName: getProtection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProtection(): WorksheetProtection;'
      return:
        type:
          - 'excel!ExcelScript.WorksheetProtection:interface'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getRange:member(1)'
    summary: 'Gets the range object, representing a single rectangular block of cells, specified by the address or name.'
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Range;'
      return:
        type:
          - 'excel!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: address
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getRangeByIndexes:member(1)'
    summary: >-
      Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows
      and columns.
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getRangeByIndexes(
                    startRow: number,
                    startColumn: number,
                    rowCount: number,
                    columnCount: number
                ): Range;
      return:
        type:
          - 'excel!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: startRow
          description: ''
          type:
            - number
        - id: startColumn
          description: ''
          type:
            - number
        - id: rowCount
          description: ''
          type:
            - number
        - id: columnCount
          description: ''
          type:
            - number
  - uid: 'excel!ExcelScript.Worksheet#getRanges:member(1)'
    summary: >-
      Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or
      name.
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): RangeAreas;'
      return:
        type:
          - 'excel!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: address
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getShape:member(1)'
    name: getShape(key)
    fullName: getShape(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShape(key: string): Shape;'
      return:
        type:
          - 'excel!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getShapes:member(1)'
    name: getShapes()
    fullName: getShapes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShapes(): Shape[];'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getShapes~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getShowGridlines:member(1)'
    summary: Gets or sets the worksheet's gridlines flag. This flag determines whether gridlines are visible to the user.
    name: getShowGridlines()
    fullName: getShowGridlines()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShowGridlines(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getShowHeadings:member(1)'
    summary: Gets or sets the worksheet's headings flag. This flag determines whether headings are visible to the user.
    name: getShowHeadings()
    fullName: getShowHeadings()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShowHeadings(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getSlicer:member(1)'
    name: getSlicer(key)
    fullName: getSlicer(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicer(key: string): Slicer | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getSlicer~0:complex'
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getSlicers:member(1)'
    name: getSlicers()
    fullName: getSlicers()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicers(): Slicer[];'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getSlicers~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getStandardHeight:member(1)'
    summary: 'Returns the standard (default) height of all the rows in the worksheet, in points. Read-only.'
    name: getStandardHeight()
    fullName: getStandardHeight()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getStandardHeight(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getStandardWidth:member(1)'
    summary: >-
      Returns or sets the standard (default) width of all the columns in the worksheet. One unit of column width is
      equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0
      (zero) is used.
    name: getStandardWidth()
    fullName: getStandardWidth()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getStandardWidth(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getTabColor:member(1)'
    summary: >-
      Gets or sets the worksheet tab color. When retrieving the tab color, if the worksheet is invisible, the value will
      be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned.
      Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string
      to set an "auto" color, or a real color otherwise.
    name: getTabColor()
    fullName: getTabColor()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTabColor(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getTable:member(1)'
    name: getTable(key)
    fullName: getTable(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(key: string): Table | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getTable~0:complex'
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#getTables:member(1)'
    name: getTables()
    fullName: getTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(): Table[];'
      return:
        type:
          - 'excel!ExcelScript.Worksheet#getTables~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#getUsedRange:member(1)'
    summary: >-
      The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.
      If the entire worksheet is blank, this function will return a null object.
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#getVisibility:member(1)'
    summary: The Visibility of the worksheet.
    name: getVisibility()
    fullName: getVisibility()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibility(): SheetVisibility;'
      return:
        type:
          - 'excel!ExcelScript.SheetVisibility:enum'
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#refreshAllPivotTables:member(1)'
    name: refreshAllPivotTables()
    fullName: refreshAllPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAllPivotTables(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!ExcelScript.Worksheet#replaceAll:member(1)'
    summary: Finds and replaces the given string based on the criteria specified within the current worksheet.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: text
          description: ''
          type:
            - string
        - id: replacement
          description: ''
          type:
            - string
        - id: criteria
          description: ''
          type:
            - 'excel!ExcelScript.ReplaceCriteria:interface'
  - uid: 'excel!ExcelScript.Worksheet#setEnableCalculation:member(1)'
    name: setEnableCalculation(enableCalculation)
    fullName: setEnableCalculation(enableCalculation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setEnableCalculation(enableCalculation: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: enableCalculation
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#setName:member(1)'
    name: setName(name)
    fullName: setName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setName(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#setPosition:member(1)'
    name: setPosition(position)
    fullName: setPosition(position)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPosition(position: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: position
          description: ''
          type:
            - number
  - uid: 'excel!ExcelScript.Worksheet#setShowGridlines:member(1)'
    name: setShowGridlines(showGridlines)
    fullName: setShowGridlines(showGridlines)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShowGridlines(showGridlines: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: showGridlines
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#setShowHeadings:member(1)'
    name: setShowHeadings(showHeadings)
    fullName: setShowHeadings(showHeadings)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShowHeadings(showHeadings: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: showHeadings
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Worksheet#setStandardWidth:member(1)'
    name: setStandardWidth(standardWidth)
    fullName: setStandardWidth(standardWidth)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setStandardWidth(standardWidth: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: standardWidth
          description: ''
          type:
            - number
  - uid: 'excel!ExcelScript.Worksheet#setTabColor:member(1)'
    name: setTabColor(tabColor)
    fullName: setTabColor(tabColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTabColor(tabColor: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tabColor
          description: ''
          type:
            - string
  - uid: 'excel!ExcelScript.Worksheet#setVisibility:member(1)'
    name: setVisibility(visibility)
    fullName: setVisibility(visibility)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setVisibility(visibility: SheetVisibility): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: visibility
          description: ''
          type:
            - 'excel!ExcelScript.SheetVisibility:enum'
  - uid: 'excel!ExcelScript.Worksheet#showOutlineLevels:member(1)'
    summary: >-
      Shows row or column groups by their outline levels. Outlines group and summarize a list of data in the worksheet.
      The `rowLevels` and `columnLevels` parameters specify how many levels of the outline will be displayed. The
      acceptable argument range is between 0 and 8. A value of 0 does not change the current display. A value greater
      than the current number of levels displays all the levels.
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowLevels
          description: ''
          type:
            - number
        - id: columnLevels
          description: ''
          type:
            - number
references:
  - uid: 'excel!ExcelScript.Chart:interface'
    name: Chart
  - uid: 'excel!ExcelScript.ChartType:enum'
    name: ChartType
  - uid: 'excel!ExcelScript.Range:interface'
    name: Range
  - uid: 'excel!ExcelScript.ChartSeriesBy:enum'
    name: ChartSeriesBy
  - uid: 'excel!ExcelScript.Comment:interface'
    name: Comment
  - uid: 'excel!ExcelScript.Worksheet#addComment~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.Worksheet#addComment~1:complex'
    name: CommentRichContent | string
    fullName: ExcelScript.CommentRichContent | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.CommentRichContent:interface'
        name: CommentRichContent
        fullName: ExcelScript.CommentRichContent
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.ContentType:enum'
    name: ContentType
  - uid: 'excel!ExcelScript.Shape:interface'
    name: Shape
  - uid: 'excel!ExcelScript.GeometricShapeType:enum'
    name: GeometricShapeType
  - uid: 'excel!ExcelScript.Worksheet#addGroup~0:complex'
    name: Array<string | Shape>
    fullName: Array<string | ExcelScript.Shape>
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: '<string | '
        fullName: '<string | '
      - uid: 'excel!ExcelScript.Shape:interface'
        name: Shape
        fullName: ExcelScript.Shape
      - name: '>'
        fullName: '>'
  - uid: 'excel!ExcelScript.ConnectorType:enum'
    name: ConnectorType
  - uid: 'excel!ExcelScript.NamedItem:interface'
    name: NamedItem
  - uid: 'excel!ExcelScript.Worksheet#addNamedItem~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.PivotTable:interface'
    name: PivotTable
  - uid: 'excel!ExcelScript.Worksheet#addPivotTable~0:complex'
    name: Range | string | Table
    fullName: ExcelScript.Range | string | ExcelScript.Table
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string | '
        fullName: ' | string | '
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'excel!ExcelScript.Worksheet#addPivotTable~1:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: |2-
           | string
                  
        fullName: |2-
           | string
                  
  - uid: 'excel!ExcelScript.Slicer:interface'
    name: Slicer
  - uid: 'excel!ExcelScript.Worksheet#addSlicer~0:complex'
    name: string | PivotTable | Table
    fullName: string | ExcelScript.PivotTable | ExcelScript.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'excel!ExcelScript.Worksheet#addSlicer~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | ExcelScript.PivotField | number | ExcelScript.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!ExcelScript.PivotField:interface'
        name: PivotField
        fullName: ExcelScript.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'excel!ExcelScript.TableColumn:interface'
        name: TableColumn
        fullName: ExcelScript.TableColumn
  - uid: 'excel!ExcelScript.Worksheet#addSlicer~2:complex'
    name: string | Worksheet
    fullName: string | ExcelScript.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
  - uid: 'excel!ExcelScript.Table:interface'
    name: Table
  - uid: 'excel!ExcelScript.Worksheet#addTable~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.Worksheet:interface'
    name: Worksheet
  - uid: 'excel!ExcelScript.WorksheetPositionType:enum'
    name: WorksheetPositionType
  - uid: 'excel!ExcelScript.RangeAreas:interface'
    name: RangeAreas
  - uid: 'excel!ExcelScript.WorksheetSearchCriteria:interface'
    name: WorksheetSearchCriteria
  - uid: 'excel!ExcelScript.AutoFilter:interface'
    name: AutoFilter
  - uid: 'excel!ExcelScript.Worksheet#getChart~0:complex'
    name: Chart | undefined
    fullName: ExcelScript.Chart | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Chart:interface'
        name: Chart
        fullName: ExcelScript.Chart
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Worksheet#getCharts~0:complex'
    name: 'Chart[]'
    fullName: 'ExcelScript.Chart[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Chart:interface'
        name: Chart
        fullName: ExcelScript.Chart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Worksheet#getCommentByCell~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.Worksheet#getComments~0:complex'
    name: 'Comment[]'
    fullName: 'ExcelScript.Comment[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Comment:interface'
        name: Comment
        fullName: ExcelScript.Comment
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.WorksheetFreezePanes:interface'
    name: WorksheetFreezePanes
  - uid: 'excel!ExcelScript.Worksheet#getNamedItem~0:complex'
    name: NamedItem | undefined
    fullName: ExcelScript.NamedItem | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Worksheet#getNames~0:complex'
    name: 'NamedItem[]'
    fullName: 'ExcelScript.NamedItem[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.PageLayout:interface'
    name: PageLayout
  - uid: 'excel!ExcelScript.Worksheet#getPivotTable~0:complex'
    name: PivotTable | undefined
    fullName: ExcelScript.PivotTable | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Worksheet#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.WorksheetProtection:interface'
    name: WorksheetProtection
  - uid: 'excel!ExcelScript.Worksheet#getShapes~0:complex'
    name: 'Shape[]'
    fullName: 'ExcelScript.Shape[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Shape:interface'
        name: Shape
        fullName: ExcelScript.Shape
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Worksheet#getSlicer~0:complex'
    name: Slicer | undefined
    fullName: ExcelScript.Slicer | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Worksheet#getSlicers~0:complex'
    name: 'Slicer[]'
    fullName: 'ExcelScript.Slicer[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Worksheet#getTable~0:complex'
    name: Table | undefined
    fullName: ExcelScript.Table | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Worksheet#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.SheetVisibility:enum'
    name: SheetVisibility
  - uid: 'excel!ExcelScript.ReplaceCriteria:interface'
    name: ReplaceCriteria
